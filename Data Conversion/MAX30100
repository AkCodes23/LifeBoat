#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include <stdio.h>
#include <unistd.h> // for delay function

#define MAX30100_ADDRESS 0x57 // I2C address of the MAX30100 sensor
#define SAMPLE_RATE 100 // Sample rate of the sensor (Hz)
#define BUFFER_SIZE 100 // Buffer size for storing raw IR data

void i2c_read(uint8_t address, uint8_t registerAddress, uint8_t* data, uint8_t length) {
    // Implement I2C read function according to your platform
    // For example, using WiringPi library on Raspberry Pi:
    // wiringPiI2CReadReg16(address, registerAddress, data, length);
}

void readRawData(uint16_t* irData, uint16_t* redData) {
    // Read IR data (3 bytes)
    uint8_t irBuffer[3];
    i2c_read(MAX30100_ADDRESS, 0x04, irBuffer, 3);
    *irData = (irBuffer[0] << 8) | irBuffer[1] | (irBuffer[2] << 16);

    // Read Red data (3 bytes)
    uint8_t redBuffer[3];
    i2c_read(MAX30100_ADDRESS, 0x07, redBuffer, 3);
    *redData = (redBuffer[0] << 8) | redBuffer[1] | (redBuffer[2] << 16);
}

void calculateHR(uint16_t irData[], int numSamples, float* hr) {
    // Filter the raw data (e.g., using a moving average filter)
    int filteredData[numSamples];
    for (int i = 0; i < numSamples; i++) {
        filteredData[i] = (irData[i] + irData[(i + 1) % numSamples] + irData[(i + 2) % numSamples]) / 3;
    }

    // Calculate peak-to-peak amplitude of the IR signal
    int peakToPeak = 0;
    for (int i = 1; i < numSamples; i++) {
        int diff = filteredData[i] - filteredData[i-1];
        if (diff > peakToPeak) {
            peakToPeak = diff;
        }
    }

    // Calculate time period between peaks (RR interval)
    int rrInterval = 0;
    for (int i = 1; i < numSamples; i++) {
        if (filteredData[i] > peakToPeak / 2 && filteredData[i-1] <= peakToPeak / 2) {
            rrInterval = i - (i - SAMPLE_RATE / 60); // Convert to seconds
            break;
        }
    }

    // Calculate HR from RR interval
    *hr = 60 / (float)rrInterval;
}

void calculateSpO2(uint16_t irData, uint16_t redData, float* spo2) {
    // Calculate ratio of Red to IR absorbance values (R)
    float R = (float)redData / irData;

    // Calculate SpO2 from R value using a calibration curve or lookup table
    // For example, using a simple linear calibration curve:
    *spo2 = 110 - 25 * R;
}

int main() {
    uint16_t irData, redData;
    float hr, spo2;
    uint16_t irBuffer[BUFFER_SIZE];

    while (1) {
        readRawData(&irData, &redData);

        // Store raw IR data in a buffer for HR calculation
        irBuffer[BUFFER_SIZE - 1] = irData;
        for (int i = BUFFER_SIZE - 1; i > 0; i--) {
            irBuffer[i - 1] = irBuffer[i];
        }

        calculateHR(irBuffer, BUFFER_SIZE, &hr);
        calculateSpO2(irData, redData, &spo2);

        printf("Heart Rate: %f bpm\n", hr);
        printf("Oxygen Saturation: %f %%\n", spo2);
        usleep(1000000); // 1 second delay
    }

    return 0;
}